(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["mixin-page-md"],{"1afc":function(n,t,e){"use strict";e.r(t);var i=function(){var n=this,t=n._self._c;return t("section",{staticClass:"content reasy-doc"},[n._m(0),t("p",[n._v("用于页面的一些通用操作，项目中可以参考这个 mixin 进行改写成符合项目的 page 通用项。")]),n._m(1),n._m(2),n._m(3),n._m(4),t("side-link")],1)},a=[function(){var n=this,t=n._self._c;return t("h2",{attrs:{id:"page-mixin"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#page-mixin"}},[n._v("¶")]),n._v(" page-mixin")])},function(){var n=this,t=n._self._c;return t("h2",{attrs:{id:"page-mixin-xu-yao-zhi-chi-xiang"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#page-mixin-xu-yao-zhi-chi-xiang"}},[n._v("¶")]),n._v(" page-mixin 需要支持项")])},function(){var n=this,t=n._self._c;return t("ul",[t("li",[n._v("基本信息配置")]),t("li",[n._v("帮助信息处理")]),t("li",[n._v("通用数据获取处理")]),t("li",[n._v("提交处理")]),t("li",[n._v("刷新处理")])])},function(){var n=this,t=n._self._c;return t("h2",{attrs:{id:"mixin-dai-ma"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mixin-dai-ma"}},[n._v("¶")]),n._v(" mixin 代码")])},function(){var n=this,t=n._self._c;return t("pre",[t("code",{staticClass:"language-js"},[n._v('import { trimStartEndStr } from "@/common/utils/utils";\n\nexport default {\n  data() {\n    this.refreshTimer = null;\n    return {\n      // modules:[], // 必填项，用于获取模块数据 这里不写死data类型，可以是计算属性\n      // pageTitle:"", // 必填项，页面标题 这里不写死data类型，可以是计算属性\n      initModules: [], // 用于首次进入页面时获取数据\n      saveMsgObj: {\n        successMsg: "", // 保存成功提示语，默认空\n        errMsg: ""\n      },\n      isSubmitLoading: false, // 提交时的loading\n      isInitLoading: true, // 初始loading\n      refreshFlag: false, // 是否开启自动刷新 挂载时会监听这个值，\n      refreshTime: 5000, // 更新时间\n      trimKey: ["remark", "PolicyName"], // 自动出去前后的空格\n      isRefreshAfterFail: true, // 保存失败之后是否更新数据\n      pageRules: [] // 存储页面通用校验，保存前调用\n    };\n  },\n  created() {\n    // 存储初始刷新\n    this.initRefreshFlag = this.refreshFlag;\n    // 获取页面数据\n    this.getData(true);\n    // 启动刷新\n    this.refresh(this.refreshFlag);\n\n    this.setPageHelp();\n  },\n  methods: {\n    /**\n     * 获取数据\n     * @param {boolean} isInit 是否初始化，若初始化则添加 initModule 一起获取\n     */\n    getData(isInit) {\n      let modules = this.modules;\n      if (isInit) {\n        modules = modules.concat(this.initModules);\n      }\n      this.$getModules(modules).then(res => {\n        this.isInitLoading = false;\n        this.formatData(res, isInit);\n      });\n    },\n    formatData(res) {\n      return res;\n    },\n    /**\n     * 对保存数据进行通用 trim 操作\n     * @param {object} submitData\n     */\n    _trimStr(submitData) {\n      if (submitData)\n        this.trimKey.forEach(key => {\n          // 去除前后空格处理\n          if (submitData[key]) {\n            submitData[key] = trimStartEndStr(submitData[key]);\n          }\n        });\n    },\n    /**\n     * 提交前数据处理，目前是包装保存数据\n     * @param {object} submitData\n     * @param {string} submitModule\n     * @returns\n     */\n    beforeSubmit(submitData, submitModule) {\n      this._trimStr(submitData);\n      // 默认使用module包裹\n\n      return { [submitModule || this.modules[0]]: submitData };\n    },\n\n    /**\n     * 提交\n     * @param {object} submitData\n     * @param {object} submitModule\n     * @param {object} saveMsgObj\n     * @returns\n     */\n    submit(submitData, submitModule, saveMsgObj) {\n      // 自定义校验遍历所有自定义校验\n      let error = "";\n      this.pageRules.findIndex(valid => {\n        if (typeof valid === "string") {\n          if (typeof this[valid] === "function") {\n            error = this[valid](submitData);\n          }\n        } else if (valid === "function") {\n          error = valid(submitData);\n        }\n\n        return error;\n      });\n\n      if (error) {\n        this.$notify.error(error);\n        return false;\n      }\n\n      // 提交前数据处理\n      submitData = this.beforeSubmit(submitData, submitModule);\n\n      if (submitData === false) {\n        return false;\n      }\n\n      this.isSubmitLoading = true;\n      this.$setModule(submitData, saveMsgObj).then(res => {\n        this.isSubmitLoading = false;\n        // 保存成功之后刷新数据 若isRefreshAfterFail 为true 则失败之后也要刷新数据\n        if (res.errCode == 0 || this.isRefreshAfterFail) {\n          this.getRefreshData();\n        }\n      });\n    },\n    /**\n     * 获取刷新数据\n     */\n    getRefreshData() {\n      this.getData(false);\n    },\n    /**\n     * 自动刷新处理 初始时自动获取一次\n     * @param {boolean} start\n     * @param {boolean} initFlag\n     */\n    refresh(start, initFlag) {\n      this.refreshTimer && clearInterval(this.refreshTimer);\n      if (start) {\n        if (initFlag) {\n          this.getRefreshData();\n        }\n        this.refreshTimer = setInterval(() => {\n          this.getRefreshData();\n        }, this.refreshTime);\n      }\n    },\n    // 帮助信息处理\n    setPageHelp() {\n      return;\n    }\n  },\n  watch: {\n    refreshFlag(val) {\n      // 只有初始flag是 true 的才可以 开启 // todo 看看这里要不要修改 若是为 false 也要能开启呢\n      this.refresh(this.initRefreshFlag && val);\n    }\n  },\n  beforeDestroy() {\n    this.refreshFlag && this.refresh(false);\n  }\n};\n')])])}],s=e("2877"),r={},l=Object(s["a"])(r,i,a,!1,null,null,null);t["default"]=l.exports}}]);